events {
    worker_connections 1024; # Set the number of simultaneous connections that can be handled.
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    sendfile on;

    upstream expenses_service {
        server expenses-service:8080;
    }

    upstream insights_service {
        server insights-service:5000;
    }

    upstream auth_service {
        server auth-service:3000;
    }

    server {
        listen 80;

        location /auth/ {
            proxy_pass http://auth_service/;
            rewrite ^/auth(/.*)$ $1 break;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /validate-token {
            internal;

            if ($http_authorization ~* "^Bearer (.+)$") {
                set $token $1;
            }

            proxy_pass http://auth_service/api/user/validate-token?token=$token;

            proxy_set_header Authorization $http_authorization;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /expenses/ {
            auth_request /validate-token;
            proxy_pass http://expenses_service/;
            rewrite ^/expenses(/.*)$ $1 break;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /insights/ {
            auth_request /validate-token;
            proxy_pass http://insights_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        error_page 401 = @access_denied;
        location @access_denied {
            return 403 "Access Denied: Invalid or missing token";
        }
    }
}
