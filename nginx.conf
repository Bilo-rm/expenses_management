worker_processes 1;

events {
    worker_connections 1024;
}

http {
    # Load balancing for Auth Service
    upstream auth_service {
        server auth-service-1:3000;
        server auth-service-2:3000;
    }

    # Load balancing for Expenses Service
    upstream expenses_service {
        server expenses-service-1:8080;
        server expenses-service-2:8080;
    }

    # Load balancing for Insights Service
    upstream insights_service {
        server insights-service-1:5000;
        server insights-service-2:5000;
    }

    # Middleware for JWT Authentication
    lua_shared_dict jwt_cache 10m;

    server {
        listen 80;

        # Route for authentication
        location /auth {
            proxy_pass http://auth_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # Route for expenses service
        location /expenses {
            access_by_lua_block {
                local jwt = require("resty.jwt")
                local validators = require("resty.jwt-validators")

                local jwt_secret = os.getenv("JWT_SECRET") or "Hr9MwwFT32"

                local auth_header = ngx.var.http_authorization
                if not auth_header then
                    return ngx.exit(401)
                end
                local token = auth_header:sub(8)

                local jwt_obj = jwt:verify(jwt_secret, token, {
                    validators.set_system_leeway(15),
                    validators.claim_exists("sub"),
                    validators.claim_exists("exp")
                })

                if not jwt_obj["verified"] then
                    ngx.status = 401
                    ngx.say("Invalid JWT: ", jwt_obj.reason)
                    return ngx.exit(401)
                end
            }
            proxy_pass http://expenses_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # Route for insights service
        location /insights {
            access_by_lua_block {
                local jwt = require("resty.jwt")
                local validators = require("resty.jwt-validators")

                local jwt_secret = os.getenv("JWT_SECRET") or "Hr9MwwFT32"

                local auth_header = ngx.var.http_authorization
                if not auth_header then
                    return ngx.exit(401)
                end
                local token = auth_header:sub(8)

                local jwt_obj = jwt:verify(jwt_secret, token, {
                    validators.set_system_leeway(15),
                    validators.claim_exists("sub"),
                    validators.claim_exists("exp")
                })

                if not jwt_obj["verified"] then
                    ngx.status = 401
                    ngx.say("Invalid JWT: ", jwt_obj.reason)
                    return ngx.exit(401)
                end
            }
            proxy_pass http://insights_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
    }
}
