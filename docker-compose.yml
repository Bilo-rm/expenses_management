version: '3.8'
services:
  # MySQL Database for Expenses Service
  expenses-db:
    image: mysql:8.0
    container_name: expenses_db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: expenses_db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "3306:3306"
    volumes:
      - expenses-db-data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
   # networks:
    #  - expenses-network
  # Expenses Service (Go Application)
  #expenses-service:
  ##  build: ./exp-service-go-  # Path to the Go app directory
  #  container_name: expenses_go_app
  #  ports:
    #  - "8080:8080"
   # depends_on:
   #   - expenses-db
  #  environment:
    #  DB_HOST: expenses-db
    #  DB_USER: root
     # DB_PASSWORD: root
     # DB_NAME: expenses_db
  #  networks:
   #   - expenses-network

  # Expenses Insights Service (Flask Application)
  #insights-service:
    #build: ./expenses-Insights  # Path to the Flask app directory
    #container_name: expenses_insights_service
    #ports:
     # - "5000:5000"
    #depends_on:
      #- insights-db
      #- expenses-service  # This ensures the Go app is ready before Flask starts
   # environment:
    #  EXPENSES_SERVICE_URL: http://expenses-service:8080  # URL of the Go app for Flask to interact with
  #  networks:
    #  - expenses-network

     # MongoDB for Auth Service
  mongo:
    image: mongo:6.0
    container_name: mongo
    ports:
      - "27017:27017" # Expose MongoDB on the host for testing
    volumes:
      - mongo-data:/users/userDB
    networks:
      - expenses-network

  # Auth Service
  auth-service:
    build:
      context: ./auth  # Path to the Auth service directory
      dockerfile: Dockerfile
    container_name: auth_service
    ports:
      - "3000:3000" # Maps port 3000 of the host to port 3000 of the container
    environment:
      - MONGO_URI=mongodb://mongo:27017/userDB  # Connect to the MongoDB container
      - JWT_SECRET=Hr9MwwFT32
    depends_on:
      - mongo
    volumes:
      - ./auth:/usr/src/app
    networks:
      - expenses-network


  #  API Gateway
  #api-gateway:
    #build: ./api-gateway
    #container_name: api_gateway
    #ports:
      #- "4000:4000"  # Expose API Gateway on port 4000
   # environment:
      #- JWT_SECRET=Hr9MwwFT32
   # depends_on:
     # - auth-service
     # - expenses-service
     # - insights-service
  #  networks:
      #- expenses-network


networks:
  expenses-network:
    driver: bridge

volumes:
  expenses-db-data:
  #insights-db-data:
  mongo-data:
  