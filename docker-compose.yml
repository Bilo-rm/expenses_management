version: '3.8'

services:
  # MySQL Database for Expenses Service
  expenses-db:
    image: mysql:8.0
    container_name: expenses_db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: expenses_db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "3306:3306"
    volumes:
      - expenses-db-data:/var/lib/mysql
    networks:
      - expenses-network

  # Expenses Service (Go Application)
  expenses-service:
    build: ./exp-service-go-  # Path to the Go app directory
    environment:
      DB_HOST: expenses-db
      DB_USER: root
      DB_PASSWORD: root
      DB_NAME: expenses_db
    depends_on:
      - expenses-db
    networks:
      - expenses-network

  # Define replicas for Expenses Service
  expenses-service-1:
    extends:
      service: expenses-service
    container_name: expenses_service_1

  expenses-service-2:
    extends:
      service: expenses-service
    container_name: expenses_service_2

    # PostgreSQL Database for Expenses Insights Service

 # insights-db:
  #  image: postgres:13
   # container_name: insights_db
   # restart: always
   # environment:
    #  POSTGRES_PASSWORD: root
    #  POSTGRES_DB: insights_db
    #  POSTGRES_USER: user
  #  ports:
    #  - "5432:5432"
   # volumes:
   #   - insights-db-data:/var/lib/postgresql/data
   # networks:
   #   - expenses-network


  # Expenses Insights Service (Flask Application)
  insights-service:
    build: ./expenses-Insights  # Path to the Flask app directory
    environment:
      EXPENSES_SERVICE_URL: http://expenses-service:8080
    depends_on:
      - expenses-service
    networks:
      - expenses-network

  insights-service-1:
    extends:
      service: insights-service
    container_name: insights_service_1

  insights-service-2:
    extends:
      service: insights-service
    container_name: insights_service_2

  # MongoDB for Auth Service
  mongo:
    image: mongo:6.0
    container_name: mongo
    ports:
      - "27017:27017" # Expose MongoDB on the host for testing
    volumes:
      - mongo-data:/users/userDB
    networks:
      - expenses-network

  # Auth Service
  auth-service:
    build:
      context: ./auth  # Path to the Auth service directory
      dockerfile: Dockerfile
    environment:
      - MONGO_URI=mongodb://mongo:27017/userDB
      - JWT_SECRET=Hr9MwwFT32
    depends_on:
      - mongo
    networks:
      - expenses-network

  auth-service-1:
    extends:
      service: auth-service
    container_name: auth_service_1

  auth-service-2:
    extends:
      service: auth-service
    container_name: auth_service_2

  # Nginx API Gateway
  nginx:
    image: nginx:latest
    container_name: api_gateway
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    depends_on:
      - expenses-service-1
      - expenses-service-2
      - insights-service-1
      - insights-service-2
      - auth-service-1
      - auth-service-2
    networks:
      - expenses-network

networks:
  expenses-network:

volumes:
  expenses-db-data:
  mongo-data:
  #insights-db-data: